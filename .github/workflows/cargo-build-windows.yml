name: Build and Test Run on Windows

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build tools
      run: |
        choco install nasm pkgconfiglite 7zip

    - name: Download and extract FFmpeg shared build
      shell: powershell
      run: |
        # Download FFmpeg shared build (like your local setup)
        curl -LO https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-shared.7z
        
        # Extract to a temporary location
        7z x ffmpeg-git-shared.7z -o"temp_ffmpeg"
        
        # Find the extracted directory and move to C:\ffmpeg
        $ffmpegDir = Get-ChildItem "temp_ffmpeg" | Where-Object { $_.PSIsContainer } | Select-Object -First 1
        if (Test-Path "C:\ffmpeg") { Remove-Item "C:\ffmpeg" -Recurse -Force }
        Move-Item "temp_ffmpeg\$($ffmpegDir.Name)" "C:\ffmpeg"
        Remove-Item "temp_ffmpeg" -Recurse -Force
        
        # Add bin directory to PATH (this contains the DLLs)
        echo "C:\ffmpeg\bin" >> $env:GITHUB_PATH
        # Also add to current session PATH for immediate availability
        $env:PATH = "C:\ffmpeg\bin;$env:PATH"
        
        # Verify the setup - check for DLLs in bin
        Write-Host "FFmpeg bin directory contents:"
        Get-ChildItem "C:\ffmpeg\bin\*.dll" | Select-Object Name
        
        Write-Host "FFmpeg executables:"
        Get-ChildItem "C:\ffmpeg\bin\*.exe" | Select-Object Name
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Build with FFmpeg
      shell: powershell
      run: |
        # Just build normally - ffmpeg-sys should find the DLLs in PATH
        cargo build --verbose
    
    - name: Test Run (with timeout)
      shell: powershell
      run: |
        # PowerShell timeout equivalent
        $job = Start-Job -ScriptBlock { cargo run }
        if (Wait-Job $job -Timeout 30) {
          Receive-Job $job
        } else {
          Stop-Job $job
          Write-Host "Test run timed out after 30 seconds"
        }
        Remove-Job $job -Force
      continue-on-error: true