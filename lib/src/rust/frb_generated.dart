// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/abstractions.dart';
import 'api/inference.dart';
import 'api/postprocessing.dart';
import 'api/preprocessing.dart';
import 'api/utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInferenceInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.0';

  @override
  int get rustContentHash => -1831890962;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_boquilahub',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<XYXY>> crateApiInferenceDetect({required String filePath});

  Future<double> crateApiUtilsGetCudaVersion();

  Future<void> crateApiInferenceInitApp();

  Future<(ArrayF32Ix4, int, int)> crateApiPreprocessingPrepareInput(
      {required List<int> buf,
      required int inputWidth,
      required int inputHeight});

  Future<List<XYXY>> crateApiPostprocessingProcessOutput(
      {required ArrayF32IxDyn output,
      required int imgWidth,
      required int imgHeight,
      required int inputWidth,
      required int inputHeight});

  Future<void> crateApiInferenceSetModel(
      {required String value,
      required int newInputWidth,
      required int newInputHeight});

  Future<double> crateApiAbstractionsXywHnArea({required XYWHn that});

  Future<bool> crateApiAbstractionsXywHnCheck({required XYWHn that});

  Future<BigInt> crateApiAbstractionsXywHnGetClassId({required XYWHn that});

  Future<double> crateApiAbstractionsXywHnGetProb({required XYWHn that});

  Future<double> crateApiAbstractionsXywHnIntersect(
      {required XYWHn that, required XYWHn other});

  Future<double> crateApiAbstractionsXywHnIou(
      {required XYWHn that, required XYWHn other});

  Future<XYWHn> crateApiAbstractionsXywHnNew(
      {required double x,
      required double y,
      required double w,
      required double h,
      required BigInt classId,
      required double prob});

  Future<XYXYn> crateApiAbstractionsXywHnToxyxyn({required XYWHn that});

  Future<double> crateApiAbstractionsXywhArea({required XYWH that});

  Future<bool> crateApiAbstractionsXywhCheck({required XYWH that});

  Future<BigInt> crateApiAbstractionsXywhGetClassId({required XYWH that});

  Future<double> crateApiAbstractionsXywhGetProb({required XYWH that});

  Future<double> crateApiAbstractionsXywhIntersect(
      {required XYWH that, required XYWH other});

  Future<double> crateApiAbstractionsXywhIou(
      {required XYWH that, required XYWH other});

  Future<XYWH> crateApiAbstractionsXywhNew(
      {required double x,
      required double y,
      required double w,
      required double h,
      required BigInt classId,
      required double prob});

  Future<XYXY> crateApiAbstractionsXywhToxyxyn({required XYWH that});

  Future<double> crateApiAbstractionsXyxYnArea({required XYXYn that});

  Future<bool> crateApiAbstractionsXyxYnCheck({required XYXYn that});

  Future<BigInt> crateApiAbstractionsXyxYnGetClassId({required XYXYn that});

  Future<double> crateApiAbstractionsXyxYnGetProb({required XYXYn that});

  Future<double> crateApiAbstractionsXyxYnIntersect(
      {required XYXYn that, required XYXYn other});

  Future<double> crateApiAbstractionsXyxYnIou(
      {required XYXYn that, required XYXYn other});

  Future<XYXYn> crateApiAbstractionsXyxYnNew(
      {required double x1,
      required double y1,
      required double x2,
      required double y2,
      required BigInt classId,
      required double prob});

  Future<XYWHn> crateApiAbstractionsXyxYnToxywhn({required XYXYn that});

  Future<double> crateApiAbstractionsXyxyArea({required XYXY that});

  Future<bool> crateApiAbstractionsXyxyCheck({required XYXY that});

  Future<BigInt> crateApiAbstractionsXyxyGetClassId({required XYXY that});

  Future<double> crateApiAbstractionsXyxyGetProb({required XYXY that});

  Future<double> crateApiAbstractionsXyxyIntersect(
      {required XYXY that, required XYXY other});

  Future<double> crateApiAbstractionsXyxyIou(
      {required XYXY that, required XYXY other});

  Future<XYXY> crateApiAbstractionsXyxyNew(
      {required double x1,
      required double y1,
      required double x2,
      required double y2,
      required BigInt classId,
      required double prob});

  Future<XYWH> crateApiAbstractionsXyxyToxywhn({required XYXY that});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArrayF32Ix4;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArrayF32Ix4;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArrayF32Ix4Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArrayF32IxDyn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArrayF32IxDyn;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArrayF32IxDynPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<XYXY>> crateApiInferenceDetect({required String filePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_xyxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceDetectConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceDetectConstMeta => const TaskConstMeta(
        debugName: "detect",
        argNames: ["filePath"],
      );

  @override
  Future<double> crateApiUtilsGetCudaVersion() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUtilsGetCudaVersionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUtilsGetCudaVersionConstMeta =>
      const TaskConstMeta(
        debugName: "get_cuda_version",
        argNames: [],
      );

  @override
  Future<void> crateApiInferenceInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<(ArrayF32Ix4, int, int)> crateApiPreprocessingPrepareInput(
      {required List<int> buf,
      required int inputWidth,
      required int inputHeight}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(buf, serializer);
        sse_encode_u_32(inputWidth, serializer);
        sse_encode_u_32(inputHeight, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_arrayf_32_ix_4_u_32_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPreprocessingPrepareInputConstMeta,
      argValues: [buf, inputWidth, inputHeight],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPreprocessingPrepareInputConstMeta =>
      const TaskConstMeta(
        debugName: "prepare_input",
        argNames: ["buf", "inputWidth", "inputHeight"],
      );

  @override
  Future<List<XYXY>> crateApiPostprocessingProcessOutput(
      {required ArrayF32IxDyn output,
      required int imgWidth,
      required int imgHeight,
      required int inputWidth,
      required int inputHeight}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
            output, serializer);
        sse_encode_u_32(imgWidth, serializer);
        sse_encode_u_32(imgHeight, serializer);
        sse_encode_u_32(inputWidth, serializer);
        sse_encode_u_32(inputHeight, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_xyxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiPostprocessingProcessOutputConstMeta,
      argValues: [output, imgWidth, imgHeight, inputWidth, inputHeight],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiPostprocessingProcessOutputConstMeta =>
      const TaskConstMeta(
        debugName: "process_output",
        argNames: [
          "output",
          "imgWidth",
          "imgHeight",
          "inputWidth",
          "inputHeight"
        ],
      );

  @override
  Future<void> crateApiInferenceSetModel(
      {required String value,
      required int newInputWidth,
      required int newInputHeight}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        sse_encode_u_32(newInputWidth, serializer);
        sse_encode_u_32(newInputHeight, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceSetModelConstMeta,
      argValues: [value, newInputWidth, newInputHeight],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceSetModelConstMeta => const TaskConstMeta(
        debugName: "set_model",
        argNames: ["value", "newInputWidth", "newInputHeight"],
      );

  @override
  Future<double> crateApiAbstractionsXywHnArea({required XYWHn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnAreaConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnAreaConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_area",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiAbstractionsXywHnCheck({required XYWHn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnCheckConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_check",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiAbstractionsXywHnGetClassId({required XYWHn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnGetClassIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnGetClassIdConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_get_class_id",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXywHnGetProb({required XYWHn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnGetProbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnGetProbConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_get_prob",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXywHnIntersect(
      {required XYWHn that, required XYWHn other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        sse_encode_box_autoadd_xyw_hn(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnIntersectConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnIntersectConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_intersect",
        argNames: ["that", "other"],
      );

  @override
  Future<double> crateApiAbstractionsXywHnIou(
      {required XYWHn that, required XYWHn other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        sse_encode_box_autoadd_xyw_hn(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnIouConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnIouConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_iou",
        argNames: ["that", "other"],
      );

  @override
  Future<XYWHn> crateApiAbstractionsXywHnNew(
      {required double x,
      required double y,
      required double w,
      required double h,
      required BigInt classId,
      required double prob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(x, serializer);
        sse_encode_f_32(y, serializer);
        sse_encode_f_32(w, serializer);
        sse_encode_f_32(h, serializer);
        sse_encode_usize(classId, serializer);
        sse_encode_f_32(prob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xyw_hn,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnNewConstMeta,
      argValues: [x, y, w, h, classId, prob],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnNewConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_new",
        argNames: ["x", "y", "w", "h", "classId", "prob"],
      );

  @override
  Future<XYXYn> crateApiAbstractionsXywHnToxyxyn({required XYWHn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyw_hn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xyx_yn,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywHnToxyxynConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywHnToxyxynConstMeta =>
      const TaskConstMeta(
        debugName: "xyw_hn_toxyxyn",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXywhArea({required XYWH that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhAreaConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhAreaConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_area",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiAbstractionsXywhCheck({required XYWH that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhCheckConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_check",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiAbstractionsXywhGetClassId({required XYWH that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhGetClassIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhGetClassIdConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_get_class_id",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXywhGetProb({required XYWH that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhGetProbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhGetProbConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_get_prob",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXywhIntersect(
      {required XYWH that, required XYWH other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        sse_encode_box_autoadd_xywh(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhIntersectConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhIntersectConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_intersect",
        argNames: ["that", "other"],
      );

  @override
  Future<double> crateApiAbstractionsXywhIou(
      {required XYWH that, required XYWH other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        sse_encode_box_autoadd_xywh(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhIouConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhIouConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_iou",
        argNames: ["that", "other"],
      );

  @override
  Future<XYWH> crateApiAbstractionsXywhNew(
      {required double x,
      required double y,
      required double w,
      required double h,
      required BigInt classId,
      required double prob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(x, serializer);
        sse_encode_f_32(y, serializer);
        sse_encode_f_32(w, serializer);
        sse_encode_f_32(h, serializer);
        sse_encode_usize(classId, serializer);
        sse_encode_f_32(prob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xywh,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhNewConstMeta,
      argValues: [x, y, w, h, classId, prob],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhNewConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_new",
        argNames: ["x", "y", "w", "h", "classId", "prob"],
      );

  @override
  Future<XYXY> crateApiAbstractionsXywhToxyxyn({required XYWH that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xywh(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xyxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXywhToxyxynConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXywhToxyxynConstMeta =>
      const TaskConstMeta(
        debugName: "xywh_toxyxyn",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXyxYnArea({required XYXYn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnAreaConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnAreaConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_area",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiAbstractionsXyxYnCheck({required XYXYn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnCheckConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_check",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiAbstractionsXyxYnGetClassId({required XYXYn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnGetClassIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnGetClassIdConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_get_class_id",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXyxYnGetProb({required XYXYn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnGetProbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnGetProbConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_get_prob",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXyxYnIntersect(
      {required XYXYn that, required XYXYn other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        sse_encode_box_autoadd_xyx_yn(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnIntersectConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnIntersectConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_intersect",
        argNames: ["that", "other"],
      );

  @override
  Future<double> crateApiAbstractionsXyxYnIou(
      {required XYXYn that, required XYXYn other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        sse_encode_box_autoadd_xyx_yn(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnIouConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnIouConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_iou",
        argNames: ["that", "other"],
      );

  @override
  Future<XYXYn> crateApiAbstractionsXyxYnNew(
      {required double x1,
      required double y1,
      required double x2,
      required double y2,
      required BigInt classId,
      required double prob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(x1, serializer);
        sse_encode_f_32(y1, serializer);
        sse_encode_f_32(x2, serializer);
        sse_encode_f_32(y2, serializer);
        sse_encode_usize(classId, serializer);
        sse_encode_f_32(prob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xyx_yn,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnNewConstMeta,
      argValues: [x1, y1, x2, y2, classId, prob],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnNewConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_new",
        argNames: ["x1", "y1", "x2", "y2", "classId", "prob"],
      );

  @override
  Future<XYWHn> crateApiAbstractionsXyxYnToxywhn({required XYXYn that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyx_yn(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xyw_hn,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxYnToxywhnConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxYnToxywhnConstMeta =>
      const TaskConstMeta(
        debugName: "xyx_yn_toxywhn",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXyxyArea({required XYXY that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyAreaConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyAreaConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_area",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiAbstractionsXyxyCheck({required XYXY that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyCheckConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyCheckConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_check",
        argNames: ["that"],
      );

  @override
  Future<BigInt> crateApiAbstractionsXyxyGetClassId({required XYXY that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyGetClassIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyGetClassIdConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_get_class_id",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXyxyGetProb({required XYXY that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyGetProbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyGetProbConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_get_prob",
        argNames: ["that"],
      );

  @override
  Future<double> crateApiAbstractionsXyxyIntersect(
      {required XYXY that, required XYXY other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        sse_encode_box_autoadd_xyxy(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyIntersectConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyIntersectConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_intersect",
        argNames: ["that", "other"],
      );

  @override
  Future<double> crateApiAbstractionsXyxyIou(
      {required XYXY that, required XYXY other}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        sse_encode_box_autoadd_xyxy(other, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyIouConstMeta,
      argValues: [that, other],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyIouConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_iou",
        argNames: ["that", "other"],
      );

  @override
  Future<XYXY> crateApiAbstractionsXyxyNew(
      {required double x1,
      required double y1,
      required double x2,
      required double y2,
      required BigInt classId,
      required double prob}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(x1, serializer);
        sse_encode_f_32(y1, serializer);
        sse_encode_f_32(x2, serializer);
        sse_encode_f_32(y2, serializer);
        sse_encode_usize(classId, serializer);
        sse_encode_f_32(prob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xyxy,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyNewConstMeta,
      argValues: [x1, y1, x2, y2, classId, prob],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyNewConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_new",
        argNames: ["x1", "y1", "x2", "y2", "classId", "prob"],
      );

  @override
  Future<XYWH> crateApiAbstractionsXyxyToxywhn({required XYXY that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_xyxy(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_xywh,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiAbstractionsXyxyToxywhnConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAbstractionsXyxyToxywhnConstMeta =>
      const TaskConstMeta(
        debugName: "xyxy_toxywhn",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArrayF32Ix4 => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArrayF32Ix4 => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArrayF32IxDyn => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArrayF32IxDyn => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn;

  @protected
  ArrayF32Ix4
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArrayF32Ix4Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArrayF32IxDyn
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArrayF32IxDynImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArrayF32Ix4
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArrayF32Ix4Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArrayF32IxDyn
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArrayF32IxDynImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BoundingBox dco_decode_TraitDef_BoundingBox(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  XYWHn dco_decode_box_autoadd_xyw_hn(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_xyw_hn(raw);
  }

  @protected
  XYWH dco_decode_box_autoadd_xywh(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_xywh(raw);
  }

  @protected
  XYXYn dco_decode_box_autoadd_xyx_yn(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_xyx_yn(raw);
  }

  @protected
  XYXY dco_decode_box_autoadd_xyxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_xyxy(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<XYXY> dco_decode_list_xyxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_xyxy).toList();
  }

  @protected
  (
    ArrayF32Ix4,
    int,
    int
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_arrayf_32_ix_4_u_32_u_32(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          arr[0]),
      dco_decode_u_32(arr[1]),
      dco_decode_u_32(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  XYWHn dco_decode_xyw_hn(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return XYWHn(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
      w: dco_decode_f_32(arr[2]),
      h: dco_decode_f_32(arr[3]),
      classId: dco_decode_usize(arr[4]),
      prob: dco_decode_f_32(arr[5]),
    );
  }

  @protected
  XYWH dco_decode_xywh(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return XYWH(
      x: dco_decode_f_32(arr[0]),
      y: dco_decode_f_32(arr[1]),
      w: dco_decode_f_32(arr[2]),
      h: dco_decode_f_32(arr[3]),
      classId: dco_decode_usize(arr[4]),
      prob: dco_decode_f_32(arr[5]),
    );
  }

  @protected
  XYXYn dco_decode_xyx_yn(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return XYXYn(
      x1: dco_decode_f_32(arr[0]),
      y1: dco_decode_f_32(arr[1]),
      x2: dco_decode_f_32(arr[2]),
      y2: dco_decode_f_32(arr[3]),
      classId: dco_decode_usize(arr[4]),
      prob: dco_decode_f_32(arr[5]),
    );
  }

  @protected
  XYXY dco_decode_xyxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return XYXY(
      x1: dco_decode_f_32(arr[0]),
      y1: dco_decode_f_32(arr[1]),
      x2: dco_decode_f_32(arr[2]),
      y2: dco_decode_f_32(arr[3]),
      classId: dco_decode_usize(arr[4]),
      prob: dco_decode_f_32(arr[5]),
    );
  }

  @protected
  ArrayF32Ix4
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArrayF32Ix4Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArrayF32IxDyn
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArrayF32IxDynImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArrayF32Ix4
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArrayF32Ix4Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArrayF32IxDyn
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArrayF32IxDynImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  XYWHn sse_decode_box_autoadd_xyw_hn(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_xyw_hn(deserializer));
  }

  @protected
  XYWH sse_decode_box_autoadd_xywh(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_xywh(deserializer));
  }

  @protected
  XYXYn sse_decode_box_autoadd_xyx_yn(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_xyx_yn(deserializer));
  }

  @protected
  XYXY sse_decode_box_autoadd_xyxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_xyxy(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<XYXY> sse_decode_list_xyxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <XYXY>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_xyxy(deserializer));
    }
    return ans_;
  }

  @protected
  (
    ArrayF32Ix4,
    int,
    int
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_arrayf_32_ix_4_u_32_u_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
            deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    var var_field2 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  XYWHn sse_decode_xyw_hn(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    var var_w = sse_decode_f_32(deserializer);
    var var_h = sse_decode_f_32(deserializer);
    var var_classId = sse_decode_usize(deserializer);
    var var_prob = sse_decode_f_32(deserializer);
    return XYWHn(
        x: var_x,
        y: var_y,
        w: var_w,
        h: var_h,
        classId: var_classId,
        prob: var_prob);
  }

  @protected
  XYWH sse_decode_xywh(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    var var_w = sse_decode_f_32(deserializer);
    var var_h = sse_decode_f_32(deserializer);
    var var_classId = sse_decode_usize(deserializer);
    var var_prob = sse_decode_f_32(deserializer);
    return XYWH(
        x: var_x,
        y: var_y,
        w: var_w,
        h: var_h,
        classId: var_classId,
        prob: var_prob);
  }

  @protected
  XYXYn sse_decode_xyx_yn(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x1 = sse_decode_f_32(deserializer);
    var var_y1 = sse_decode_f_32(deserializer);
    var var_x2 = sse_decode_f_32(deserializer);
    var var_y2 = sse_decode_f_32(deserializer);
    var var_classId = sse_decode_usize(deserializer);
    var var_prob = sse_decode_f_32(deserializer);
    return XYXYn(
        x1: var_x1,
        y1: var_y1,
        x2: var_x2,
        y2: var_y2,
        classId: var_classId,
        prob: var_prob);
  }

  @protected
  XYXY sse_decode_xyxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x1 = sse_decode_f_32(deserializer);
    var var_y1 = sse_decode_f_32(deserializer);
    var var_x2 = sse_decode_f_32(deserializer);
    var var_y2 = sse_decode_f_32(deserializer);
    var var_classId = sse_decode_usize(deserializer);
    var var_prob = sse_decode_f_32(deserializer);
    return XYXY(
        x1: var_x1,
        y1: var_y1,
        x2: var_x2,
        y2: var_y2,
        classId: var_classId,
        prob: var_prob);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          ArrayF32Ix4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArrayF32Ix4Impl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
          ArrayF32IxDyn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArrayF32IxDynImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
          ArrayF32Ix4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArrayF32Ix4Impl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32IxDyn(
          ArrayF32IxDyn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArrayF32IxDynImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_xyw_hn(XYWHn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_xyw_hn(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_xywh(XYWH self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_xywh(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_xyx_yn(XYXYn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_xyx_yn(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_xyxy(XYXY self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_xyxy(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_xyxy(List<XYXY> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_xyxy(item, serializer);
    }
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_arrayf_32_ix_4_u_32_u_32(
          (ArrayF32Ix4, int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArrayf32Ix4(
        self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
    sse_encode_u_32(self.$3, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_xyw_hn(XYWHn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
    sse_encode_f_32(self.w, serializer);
    sse_encode_f_32(self.h, serializer);
    sse_encode_usize(self.classId, serializer);
    sse_encode_f_32(self.prob, serializer);
  }

  @protected
  void sse_encode_xywh(XYWH self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
    sse_encode_f_32(self.w, serializer);
    sse_encode_f_32(self.h, serializer);
    sse_encode_usize(self.classId, serializer);
    sse_encode_f_32(self.prob, serializer);
  }

  @protected
  void sse_encode_xyx_yn(XYXYn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x1, serializer);
    sse_encode_f_32(self.y1, serializer);
    sse_encode_f_32(self.x2, serializer);
    sse_encode_f_32(self.y2, serializer);
    sse_encode_usize(self.classId, serializer);
    sse_encode_f_32(self.prob, serializer);
  }

  @protected
  void sse_encode_xyxy(XYXY self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x1, serializer);
    sse_encode_f_32(self.y1, serializer);
    sse_encode_f_32(self.x2, serializer);
    sse_encode_f_32(self.y2, serializer);
    sse_encode_usize(self.classId, serializer);
    sse_encode_f_32(self.prob, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class ArrayF32Ix4Impl extends RustOpaque implements ArrayF32Ix4 {
  // Not to be used by end users
  ArrayF32Ix4Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArrayF32Ix4Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArrayF32Ix4,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArrayF32Ix4,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArrayF32Ix4Ptr,
  );
}

@sealed
class ArrayF32IxDynImpl extends RustOpaque implements ArrayF32IxDyn {
  // Not to be used by end users
  ArrayF32IxDynImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArrayF32IxDynImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArrayF32IxDyn,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArrayF32IxDyn,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArrayF32IxDynPtr,
  );
}
